//
//  GameViewController.swift
//  iOSweep
//
//  Created by Ryan Ayers on 9/11/20.
//  Copyright (c) 2020 Ryan Ayers. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SpriteKit

protocol GameDisplayLogic: class {
  func displayGame(viewModel: Game.ViewModel)
}

class GameViewController: UIViewController, GameDisplayLogic {
  // CleanSwift Setup
  private var interactor: GameBusinessLogic?
  private func setup() {
    let viewController = self
    let interactor = GameInteractor()
    let presenter = GamePresenter()
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
  }
  
  private var scene: SKScene! = nil
  private var map: SKTileMapNode! = nil
  @IBOutlet private weak var skView: SKView!
  @IBOutlet private weak var statusMessage: UILabel!
  @IBOutlet private weak var playAgain: UIButton!
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setup()
    // Gesture Recognition
    let tapGesture = UITapGestureRecognizer(
      target: self,
      action: #selector(tapped)
    )
    self.view.addGestureRecognizer(tapGesture)
    let longGesture = UILongPressGestureRecognizer(
      target: self,
      action: #selector(longPressed)
    )
    self.view.addGestureRecognizer(longGesture)
    // Load scene
    scene = SKScene(fileNamed: "GameScene")!
    scene.scaleMode = .aspectFit
    map = scene.childNode(withName: "//tileMap") as? SKTileMapNode
    statusMessage.isHidden = true
    playAgain.isHidden = true
    skView.presentScene(scene)
    // Request initial game
    interactor?.doGame(request: Game.Request(type: 0))
  }
  
  // GameDisplayLogic Protocol
  func displayGame(viewModel: Game.ViewModel) {
    for i in 0...9 {
      for j in 0...9 {
        map?.setTileGroup(map?.tileSet.tileGroups[viewModel.textureMap[i][j]], forColumn: i, row: j)
      }
    }
    switch viewModel.status {
    case -1:
      statusMessage.text = "Game over!"
      statusMessage.isHidden = false
      playAgain.isHidden = false
    case 1:
      statusMessage.text = "You win!"
      statusMessage.isHidden = false
      playAgain.isHidden = false
    default:
      break
    }
  }
  
  // Handle user interaction
  @objc private func tapped(_ sender: UITapGestureRecognizer) {
    let location = sender.location(in: skView)
    let locationInScene = scene.convertPoint(fromView: location)
    let x = map?.tileColumnIndex(fromPosition: locationInScene)
    let y = map?.tileRowIndex(fromPosition: locationInScene)
    interactor?.doGame(request: Game.Request(x: x, y: y, type: 1))
  }
  @objc private func longPressed(_ sender: UILongPressGestureRecognizer) {
    if (sender.state == UIGestureRecognizer.State.began) {
      let location = sender.location(in: skView)
      let locationInScene = scene.convertPoint(fromView: location)
      let x = map?.tileColumnIndex(fromPosition: locationInScene)
      let y = map?.tileRowIndex(fromPosition: locationInScene)
      interactor?.doGame(request: Game.Request(x: x, y: y, type: 2))
    }
  }
  @IBAction private func newGame(_ sender: UIButton) {
    viewDidLoad()
  }
}
