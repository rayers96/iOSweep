//
//  GameInteractor.swift
//  iOSweep
//
//  Created by Ryan Ayers on 9/11/20.
//  Copyright (c) 2020 Ryan Ayers. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GameBusinessLogic {
  func doGame(request: Game.Request)
}

class GameInteractor: GameBusinessLogic {
  var presenter: GamePresentationLogic?
  
  private var board: Board = Board()
  private var status: Int = 0
  private var flips: Int = 0
  private var flags: Int = 0
  
  // GameBusinessLogic Protocol
  func doGame(request: Game.Request) {
    switch request.type {
    case 1:
      flip(x: request.x!, y: request.y!)
    case 2:
      toggleFlag(x: request.x!, y: request.y!)
    default:
      break
    }
    presenter?.presentGame(response: Game.Response(board: board, status: status))
  }
  
  // Game logic
  private func flip(x: Int, y: Int) {
    if (validateXY(x: x, y: y)) {
      if (board.b[x][y].mine) {
        board.b[x][y].flipped = true
        status = -1
      } else if (!board.b[x][y].flipped && !board.b[x][y].flagged) {
        board.b[x][y].flipped = true
        flips += 1
        if ((board.size*board.size) - flips == board.mines) {
          status = 1
        } else if (board.b[x][y].adj == 0) {
          flipAdj(x: x, y: y)
        }
      }
    }
  }
  private func toggleFlag(x: Int, y: Int) {
    if (validateXY(x: x, y: y)) {
      if (board.b[x][y].flagged) {
        board.b[x][y].flagged = false
        flags -= 1
      } else if (!(flags == board.mines) && !board.b[x][y].flipped) {
        board.b[x][y].flagged = true
        flags += 1
      }
    }
  }

  // Game helpers
  private func validateXY(x: Int, y: Int) -> Bool {
    let validX = x >= 0 && x < board.size
    let validY = y >= 0 && y < board.size
    return (validX && validY)
  }
  private func flipAdj(x: Int, y: Int) {
    for i in (x-1)...(x+1) {
      for j in (y-1)...(y+1) {
        let validI = i >= 0 && i < board.size
        let validJ = j >= 0 && j < board.size
        if (validI && validJ && (i != x || y != j)) {
          if (board.b[i][j].flipped) {
            continue
          } else {
            board.b[i][j].flipped = true
            flips += 1
            if (board.b[i][j].adj == 0) {
              flipAdj(x: i, y: j)
            }
          }
        }
      }
    }
  }
}
