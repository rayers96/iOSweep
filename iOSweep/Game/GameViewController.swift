//
//  GameViewController.swift
//  iOSweep
//
//  Created by Ryan Ayers on 9/6/20.
//  Copyright (c) 2020 Ryan Ayers. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SpriteKit

protocol GameDisplayLogic: class
{
  func displaySomething(viewModel: Game.Something.ViewModel)
}

class GameViewController: UIViewController, GameDisplayLogic
{
  var interactor: GameBusinessLogic?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    // template
    let viewController = self
    let interactor = GameInteractor()
    let presenter = GamePresenter()
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
    
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    // Display tile map filled w/ stone
    let sview = self.view as! SKView
    let scene = SKScene(fileNamed: "GameScene")!
    scene.scaleMode = .aspectFill
    let map = scene.childNode(withName: "//tileMap") as! SKTileMapNode
    map.fill(with: map.tileSet.tileGroups[0])
    sview.presentScene(scene)
  }
  
  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Game.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Game.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}
